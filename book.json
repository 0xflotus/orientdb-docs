{
  "title": "OrientDB Manual",
  "description": "OrientDB Documentation",
  "variables": {
    "download_osx": "http://mkt.orientdb.com/CE-300m1-OSX",
    "download_linux": "http://mkt.orientdb.com/CE-300m1-linux",
    "download_windows": "http://mkt.orientdb.com/CE-300m1-windows",
    "download_multiOS": "http://mkt.orientdb.com/CE-300m1-multiOS",
    "javadoc":"http://orientdb.com/javadoc/latest/",
    "source_repository":"https://github.com/orientechnologies/orientdb/blob/develop/",
    "lastGA": "3.0.0m1",
    "currentVersion": "3.0.0-M1",	
	"demodb_query_1_text": "Find Santo's Friends",
	"demodb_query_1_sql": "MATCH {Class: Profiles, as: profile, where: (Name='Santo' AND Surname='OrientDB')}-HasFriend-{Class: Profiles, as: friend}",
	"demodb_query_1_return_graph": "RETURN $pathelements",
	"demodb_query_1_return_browse": "RETURN friend.@Rid as Friend_RID, friend.Name as Friend_Name, friend.Surname as Friend_Surname",
	"demodb_query_2_text": "Find Santo's Friends who are also Customers",
	"demodb_query_2_sql": "MATCH {Class: Profiles, as: profile, where: (Name='Santo' AND Surname='OrientDB')}-HasFriend-{Class: Profiles, as: friend}<-HasProfile-{class: Customers, as: customer}",
	"demodb_query_2_return_graph": "RETURN $pathelements",
	"demodb_query_2_return_browse": "RETURN friend.@Rid as Friend_RID, friend.Name as Friend_Name, friend.Surname as Friend_Surname, customer.@Rid as Customer_RID, customer.OrderedId as Customer_OrederedId",
	"demodb_query_3_text": "Find Santo's Friends who are also Customers, and the Countries they are from",
	"demodb_query_3_sql": "MATCH {Class: Profiles, as: profile, where: (Name='Santo' AND Surname='OrientDB')}-HasFriend-{Class: Profiles, as: friend}<-HasProfile-{class: Customers, as: customer}-IsFromCountry->{Class: Countries, as: country}",
	"demodb_query_3_return_graph": "RETURN $pathelements",
	"demodb_query_3_return_browse": "RETURN friend.@Rid as Friend_RID, friend.Name as Friend_Name, friend.Surname as Friend_Surname, customer.@Rid as Customer_RID, customer.OrderedId as Customer_OrederedId, country.Name as FriendIsFrom",
	"demodb_query_4_text": "Find Santo's Friends who are also Customers, and the Orders they have placed",
	"demodb_query_4_sql": "MATCH {Class: Profiles, as: profile, where: (Name='Santo' AND Surname='OrientDB')}-HasFriend-{Class: Profiles, as: friend}<-HasProfile-{class: Customers, as: customer}<-HasCustomer-{Class: Orders, as: order}",
	"demodb_query_4_return_graph": "RETURN $pathelements",
	"demodb_query_4_return_browse": "RETURN friend.@Rid as Friend_RID, friend.Name as Friend_Name, friend.Surname as Friend_Surname, customer.@Rid as Customer_RID, customer.OrderedId as Customer_OrederedId, order.Id as OrderId",
	"demodb_query_5_text": "Among Santo's Friends, find the top 3 Customers that placed the highest number of Orders",
	"demodb_query_5_sql_browse": "SELECT OrderedId as Customer_OrderedId, in('HasCustomer').size() as NumberOfOrders, out('HasProfile').Name as Friend_Name, out('HasProfile').Surname as Friend_Surname FROM (SELECT expand(customer) FROM (MATCH {Class: Profiles, as: profile, where: (Name='Santo' AND Surname='OrientDB')}-HasFriend-{Class: Profiles, as: friend}",
    "demodb_query_5_sql_browse_part2": "<-HasProfile-{class: Customers, as: customer} RETURN customer)) ORDER BY NumberOfOrders DESC LIMIT 3",
	"demodb_query_5_sql_graph": "SELECT *, OrderedId as Customer_OrderedId, in('HasCustomer').size() as NumberOfOrders, out('HasProfile').Name as Friend_Name, out('HasProfile').Surname as Friend_Surname FROM (SELECT expand(customer) FROM (MATCH {Class: Profiles, as: profile, where: (Name='Santo' AND Surname='OrientDB')}-HasFriend-{Class: Profiles, as: friend}<-HasProfile-{class: Customers, as: customer} RETURN customer)) ORDER BY NumberOfOrders DESC LIMIT 3",
	"demodb_query_6_text": "Among Santo's Friends, find the top 3 Customers that visited the highest number of Places",
	"demodb_query_6_sql_browse": "SELECT OrderedId as Customer_OrderedId, out('HasVisited').size() as NumberOfVisits, out('HasProfile').Name as Friend_Name, out('HasProfile').Surname as Friend_Surname FROM (SELECT expand(customer) FROM (MATCH {Class: Profiles, as: profile, where: (Name='Santo' AND Surname='OrientDB')}-HasFriend-{Class: Profiles, as: friend}<-HasProfile-{class: Customers, as: customer} RETURN customer)) ORDER BY NumberOfVisits DESC LIMIT 3",
	"demodb_query_6_sql_graph": "SELECT *, OrderedId as Customer_OrderedId, out('HasVisited').size() as NumberOfVisits, out('HasProfile').Name as Friend_Name, out('HasProfile').Surname as Friend_Surname FROM (SELECT expand(customer) FROM (MATCH {Class: Profiles, as: profile, where: (Name='Santo' AND Surname='OrientDB')}-HasFriend-{Class: Profiles, as: friend}<-HasProfile-{class: Customers, as: customer} RETURN customer)) ORDER BY NumberOfVisits DESC LIMIT 3",
	"demodb_query_7_text": "Find all the Friends of Customer identified with OrderedId 1 that are not Customers (so that a product can be proposed)",
	"demodb_query_7_sql_browse": "SELECT @Rid as Friend_RID, Name as Friend_Name, Surname as Friend_Surname FROM (SELECT expand(customerFriend) FROM ( MATCH {Class:Customers, as: customer, where:(OrderedId=1)}-HasProfile-{Class:Profiles, as: profile}-HasFriend-{Class:Profiles, as: customerFriend} RETURN customerFriend)) WHERE in('HasProfile').size()=0",
	"demodb_query_7_sql_graph": "SELECT *, @Rid as Friend_RID, Name as Friend_Name, Surname as Friend_Surname FROM (SELECT expand(customerFriend) FROM ( MATCH {Class:Customers, as: customer, where:(OrderedId=1)}-HasProfile-{Class:Profiles, as: profile}-HasFriend-{Class:Profiles, as: customerFriend} RETURN customerFriend)) WHERE in('HasProfile').size()=0",
	"demodb_query_8_text": "Find the 'year of birth' of the Profiles, and how many Profiles were born in the same year",
	"demodb_query_8_sql_browse": "SELECT count(*) as NumberOfProfiles, Birthday.format('yyyy') AS YearOfBirth FROM Profiles GROUP BY YearOfBirth ORDER BY NumberOfProfiles DESC",
	"demodb_query_8_sql_graph": "NA",
	"demodb_query_9_text": "Calculate the total revenues from Orders",
	"demodb_query_9_sql_browse": "SELECT sum(Amount) AS TotalRevenuesFromOrders FROM Orders;",
	"demodb_query_9_sql_graph": "NA",
	"demodb_query_10_text": "Calculate the Average Order Value",
	"demodb_query_10_sql_browse": "...",
	"demodb_query_10_sql_graph": "NA",
	"demodb_query_11_text": "Find the year of the Orders, and how many Orders have been placed in the same year",
	"demodb_query_11_sql_browse": "SELECT count(*) as OrdersCount, OrderDate.format('yyyy') AS OrderYear FROM Orders GROUP BY OrderYear ORDER BY OrdersCount DESC",
	"demodb_query_11_sql_graph": "NA",
	"demodb_query_12_text": "Find the top 3 Profiles that have the highest number of Friends",
	"demodb_query_12_sql_browse": "SELECT @rid as Profile_RID, Name, Surname, (out('HasFriend').size() + in('HasFriend').size()) AS FriendsNumber FROM `Profiles` ORDER BY FriendsNumber DESC LIMIT 3",
	"demodb_query_12_sql_graph": "SELECT *, @rid as Profile_RID, Name, Surname, (out('HasFriend').size() + in('HasFriend').size()) AS FriendsNumber FROM `Profiles` ORDER BY FriendsNumber DESC LIMIT 3",
	"demodb_query_13_text": "Count Santo's Friends",
	"demodb_query_13_sql_browse_method_1": "SELECT COUNT(*) FROM (MATCH {Class: Profiles, as: profile, where: (Name='Santo' AND Surname='OrientDB')}-HasFriend-{Class: Profiles, as: friend} RETURN friend)",
	"demodb_query_13_sql_browse_method_2": "SELECT (in('HasFriend').size() + out('HasFriend').size()) AS FriendsNumber FROM `Profiles` WHERE Name='Santo' AND Surname='OrientDB'",
	"demodb_query_13_sql_graph": "NA",
	"demodb_query_14_text": "Find all the Customer Friends that are not Customers (so that a product can be proposed)",
	"demodb_query_14_sql_browse": "SELECT @Rid as Friend_RID, Name as Friend_Name, Surname as Friend_Surname FROM (SELECT expand(customerFriend) FROM ( MATCH {Class:Customers, as: customer}-HasProfile-{Class:Profiles, as: profile}-HasFriend-{Class:Profiles, as: customerFriend} RETURN customerFriend)) WHERE in('HasProfile').size()=0",
	"demodb_query_14_sql_graph": "SELECT * FROM (SELECT expand(customerFriend) FROM ( MATCH {Class:Customers, as: customer}-HasProfile-{Class:Profiles, as: profile}-HasFriend-{Class:Profiles, as: customerFriend} RETURN customerFriend)) WHERE in('HasProfile').size()=0",
	"demodb_query_15_text": "Find all Attractions connected with Customer with OrderedId 1",
	"demodb_query_15_sql": "MATCH {class: Customers, as: customer, where: (OrderedId=1)}--{Class: Attractions, as: attraction}",
	"demodb_query_15_return_graph": "RETURN $pathelements",
	"demodb_query_15_return_browse": "RETURN attraction.@Rid as Attaction_RID, attraction.Name as Attaction_Name, attraction.Type as Attaction_Type",
	"demodb_query_16_text": "Find all Services connected with Customer with OrderedId 1",
	"demodb_query_16_sql": "MATCH {class: Customers, as: customer, where: (OrderedId=1)}--{Class: Services, as: service}",
	"demodb_query_16_return_graph": "RETURN $pathelements",
	"demodb_query_16_return_browse": "RETURN service.@Rid as Service_RID, service.Name as Service_Name, service.Type as Service_Type",
	"demodb_query_17_text": "Find all Locations (Services + Attractions) connected with Customer with OrderedId 1",
	"demodb_query_17_sql": "MATCH {class: Customers, as: customer, where: (OrderedId=1)}--{Class: Locations, as: location}",
	"demodb_query_17_return_graph": "RETURN $pathelements",
	"demodb_query_17_return_browse": "RETURN location.@Rid as Location_RID, location.Name as Location_Name, location.Type as Location_Type",
    "demodb_query_100_text": "test test test",
	"demodb_query_100_sql": "test test test"
  },
  "links": {
    "home": "http://orientdb.com",
    "about": "http://orientdb.com",
    "issues": "https://github.com/orientechnologies/orientdb/issues",
    "contribute": "http://orientdb.com/docs/last/orientdb.wiki/Contribute-to-OrientDB.html",
    "sharing": {
      "google": "https://plus.google.com/108716918285358206552/posts",
      "facebook": "https://www.facebook.com/groups/orientdb/",
      "twitter": "https://twitter.com/OrientDB",
      "gitter": "https://gitter.im/orientechnologies/orientdb",
      "all": "http://orientdb.com"
    }
  },
  "pdf": {
    "toc": true,
    "pageNumbers": true,
    "fontSize": 12,
    "paperSize": "a4",
    "margin": {
      "right": 62,
      "left": 62,
      "top": 36,
      "bottom": 36
    },
    "footerTemplate": "Copyright (c) OrientDB LTD"
  },
  "plugins": [
    "ga",
    "anchors",
    "collapsible-menu",
    "versions",
    "edit-link",
    "addcssjs",
    "search",
    "page-toc"
  ],
  "pluginsConfig": {
    "ga": {
      "token": "UA-28543690-2"
    },
    "addcssjs": {
      "js": [
        "js/custom.js"
      ],
      "css": [
        "css/custom.css"
      ]
    },
    "versions": {
      "gitbookConfigURL": "https://raw.githubusercontent.com/orientechnologies/orientdb-docs/master/book.json",
			"type": "branches",
      "includeFilepath": true,
      "options": [
        {
          "value": "http://orientdb.com/docs/1.7.8/",
          "text": "Version 1.7.x"
        },
        {
          "value": "http://orientdb.com/docs/2.0/",
          "text": "Version 2.0.x"
        },
        {
          "value": "http://orientdb.com/docs/2.1.x",
          "text": "Version 2.1.x"
        },
        {
          "value": "http://orientdb.com/docs/2.2.x",
          "text": "Version 2.2.x"
        },
        {
          "value": "http://orientdb.com/docs/master",
          "text": "Version last",
          "selected": true
        }
      ]
    },
    "edit-link": {
      "base": "https://github.com/orientechnologies/orientdb-docs/edit/master",
      "label": "Edit This Page"
    },
    "github": {
      "url": "https://github.com/orientechnologies/orientdb"
    },
    "search": {
      "maxIndexSize": 25000000
    },
    "lunr": {
      "maxIndexSize": 25000000
    }
  }
}
